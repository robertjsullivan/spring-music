plugins {
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
//    id 'eclipse-wtp'
    id 'idea'
}

group = 'org.cloudfoundry.samples.music'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    javaCfEnvVersion = '3.1.2'
}

//dependencyManagement {
//    imports {
//        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.0'
//        mavenBom 'org.springframework.cloud:spring-cloud-sleuth-otel-dependencies:1.1.0'
//    }
//}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.4'
        mavenBom 'org.springframework.cloud:spring-cloud-sleuth-otel-dependencies:1.1.0'
    }
}

dependencies {
    // Spring Boot
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation 'io.opentelemetry:opentelemetry-api:1.18.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.18.0'
//    implementation 'io.opentelemetry:opentelemetry-sdk-common:1.18.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.18.0'
//    implementation 'io.opentelemetry:opentelemetry-exporter-otlp-trace:1.18.0'
    implementation 'io.grpc:grpc-okhttp:1.42.1'
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth') {
        exclude group: 'org.springframework.cloud', module: 'spring-cloud-sleuth-brave' //  We want to exclude the default tracer coming from Sleuth...
    }
    implementation 'org.springframework.cloud:spring-cloud-sleuth-otel-autoconfigure' // ... and we want to include the one coming from Spring Cloud Sleuth OTel

    // Java CfEnv
    implementation "io.pivotal.cfenv:java-cfenv-boot:${javaCfEnvVersion}"

    // JPA Persistence
    runtimeOnly "org.apache.commons:commons-pool2"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "com.mysql:mysql-connector-j"
    runtimeOnly "org.postgresql:postgresql"
    runtimeOnly "com.microsoft.sqlserver:mssql-jdbc"


    // uncomment to use Lettuce instead of Jedis for Redis connections
    // runtime "io.lettuce:lettuce-core"

    // Webjars
    implementation "org.webjars:bootstrap:3.1.1"
    implementation "org.webjars:angularjs:1.2.16"
    implementation "org.webjars:angular-ui:0.4.0-2"
    implementation "org.webjars:angular-ui-bootstrap:0.10.0-1"
    implementation "org.webjars:jquery:2.1.0-2"

    // Oracle - uncomment one of the following after placing driver in ./libs
    // compile files('libs/ojdbc8.jar')
    // compile files('libs/ojdbc7.jar')

    // Testing
    testImplementation "junit:junit"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    if (JavaVersion.current() != project.targetCompatibility) {
        logger.warn("The build is using Java ${JavaVersion.current()} to build a Java ${project.targetCompatibility} compatible archive.")
        logger.warn("See the project README for instructions on changing the target Java version.")
    }
}

jar {
    enabled = false
}

tasks.named("bootBuildImage") {
    builder = "paketobuildpacks/builder-jammy-base:latest"
}
